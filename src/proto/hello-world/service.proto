// Copyright 2019 The Google Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cloudrobotics.hello_world.v1alpha1;

import "src/proto/hello-world/spec.proto";
import "third_party/kubernetes_proto/meta/generated.proto";

message HelloWorld {
  // Output only.
  string apiVersion = 1;
  // Output only.
  string kind = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 3;
  HelloWorldSpec spec = 4;
  HelloWorldStatus status = 5;
}

message HelloWorldList {
  // Output only.
  string apiVersion = 1;
  // Output only.
  string kind = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 3;
  repeated HelloWorld items = 4;
}

message HelloWorldEvent {
  enum Type {
    UNKNOWN = 0;
    ADDED = 1;
    MODIFIED = 2;
    DELETED = 3;
    ERROR = 4;
  }

  Type type = 1;
  HelloWorld object = 2;
}

message GetHelloWorldRequest {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions options = 2;
}

message ListHelloWorldRequest {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions options = 1;
}

message WatchHelloWorldRequest {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions options = 1;
}

message CreateHelloWorldRequest {
  HelloWorld object = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions options = 2;
}

message UpdateHelloWorldRequest {
  HelloWorld object = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions options = 2;
}

message DeleteHelloWorldRequest {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions options = 2;
}

message DeleteHelloWorldResponse {
}

service K8sHelloWorld {
  rpc Get(GetHelloWorldRequest) returns (HelloWorld) {}
  rpc List(ListHelloWorldRequest) returns (HelloWorldList) {}
  rpc Watch(WatchHelloWorldRequest) returns (stream HelloWorldEvent) {}
  rpc Create(CreateHelloWorldRequest) returns (HelloWorld) {}
  rpc Update(UpdateHelloWorldRequest) returns (HelloWorld) {}
  rpc Delete(DeleteHelloWorldRequest) returns (DeleteHelloWorldResponse) {}
}

// Copyright 2019 The Google Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"math/rand"
	"os"
	"strconv"
	"testing"

	cloudrob "github.com/googlecloudrobotics/coresrc/go/pkg/client/version"
	"k8s.io/client-go/kubernetes"
)

type suite struct {
	*testing.T
	prefix string

	kubeRobot kubernetes.Interface
	kubeCloud kubernetes.Interface
	crobRobot cloudrob.Interface
	crobCloud cloudrob.Interface
}

func newSuite(t *testing.T, prefix string) *suite {
	var (
		projectID = os.Getenv("GCP_PROJECT_ID")
		region    = os.Getenv("GCP_REGION")
		robotName = os.Getenv("ROBOT_NAME")

		cloudCtx = fmt.Sprintf("gke_%s_%s-c_cloud_robotics", projectID, region)
		robotCtx = fmt.Sprintf("gke_%s_%s-c_%s", projectID, region, robotName)

		cloudCfg = kubeutil.LoadOutOfClusterConfig(cloudCtx)
		robotCfg = kubeutil.LoadOutOfClusterConfig(robotCtx)
	)
	return &suite{
		T:         t,
		prefix:    prefix + "-" + strconv.FormatInt(int64(rand.Int31n())),
		kubeCloud: kubernetes.NewForConfigOrDie(cloudCfg),
		kubeRobot: kubernetes.NewForConfigOrDie(robotCfg),
		crobCloud: cloudrob.NewForConfigOrDie(cloudCfg),
		crobRobot: cloudrob.NewForConfigOrDie(robotCfg),
	}
}

func (s *suite) Cleanup() {

}

func (s *suite) namespaceName(s string) string {
	return s.prefix + "-" + s
}

func (s *suite) globalName(s string) string {
	return s.prefix + "-" + s
}

func TestChartAssignment(t *testing.T) {
	s := newSuite(t)
	defer s.Cleanup()
}

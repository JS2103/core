{{ if eq .Values.app_management "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloud-master
  template:
    metadata:
      labels:
        app: cloud-master
    spec:
      containers:
      - name: cloud-master
        image: {{ .Values.registry }}{{ .Values.images.cloud_master }}
        args:
        - "--params=\
          domain={{ .Values.domain }},\
          project={{ .Values.project }},\
          ingress_ip={{ .Values.ingress_ip }},\
          registry={{ .Values.registry }},\
          deploy_environment={{ .Values.deploy_environment }},\
          certificate_authority.crt={{ .Values.certificate_authority.crt }}"
        - "--cluster=cloud"
        - "--webhook-port=9876"
        - "--cert-dir=/tls"
        env:
        - name: GOOGLE_CLOUD_PROJECT
          value: {{ .Values.project }}
        ports:
        - name: webhook
          containerPort: 9876
        volumeMounts:
        - mountPath: /home
          name: home
        - mountPath: /tls
          name: tls
      initContainers:
      # Run `helm init` to create client-side directories in $HOME/.helm which
      # some client library functionality expects to exist.
      - name: helm
        image: {{ .Values.registry }}{{ .Values.images.cloud_master }}
        command: ['/helm', 'init', '--client-only', '--stable-repo-url', 'https://k8s-at-home.com/charts']
        volumeMounts:
        - mountPath: /home
          name: home
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
      volumes:
      - name: home
        emptyDir: {}
      - name: tls
        secret:
          secretName: cloud-master-tls
---
apiVersion: v1
kind: Service
metadata:
  name: cloud-master
spec:
  type: ClusterIP
  ports:
  - port: 443
    protocol: TCP
    targetPort: webhook
  selector:
    app: cloud-master
---
# The cloud master runs admission webhooks, which need to be served via TLS.
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: cloud-master
spec:
  secretName: cloud-master-tls
  commonName: cloud-master.{{ .Release.Namespace }}.svc
  issuerRef:
    kind: ClusterIssuer
    name: cluster-authority
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: cloud-master
webhooks:
- name: approllouts.apps.cloudrobotics.com
  failurePolicy: Fail
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: cloud-master
      path: /approllout/validate
    caBundle: {{ .Values.certificate_authority.crt }}
  rules:
  - apiGroups:
    - apps.cloudrobotics.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - approllouts
- name: chartassignments.apps.cloudrobotics.com
  failurePolicy: Fail
  clientConfig:
    service:
      namespace: {{ .Release.Namespace }}
      name: cloud-master
      path: /chartassignment/validate
    caBundle: {{ .Values.certificate_authority.crt }}
  rules:
  - apiGroups:
    - apps.cloudrobotics.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - chartassignments
{{ end }}

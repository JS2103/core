# Configuration for the prometheus-operator chart.
# Reference: https://github.com/helm/charts/blob/master/stable/prometheus-operator/values.yaml
#
# WARNING: the prometheus-operator chart is complicated and error-prone. If you
# edit this file, run the following command to generate the output with `helm
# template`, and verify that your changes have the expected effect.
#
#   bazel build src/app_charts/prometheus/prometheus-operator-chart.cloud.yaml

nameOverride: kube
fullnameOverride: kube

kubeTargetVersionOverride: "v1.14.10"

# Alertmanagers have to be deployed individually by users.
alertmanager:
  enabled: false

defaultRules:
  rules: # https://github.com/helm/charts/issues/20726
    k8s: false
    kubernetesApps: false
    node: false
    prometheus: false

prometheusOperator:
  # Recent Kubernetes version provide a kube-system/kubelet service by default.
  kubeletService:
    enabled: false

prometheus:
  prometheusSpec:
    # Pick up all service monitors across all namespaces.
    serviceMonitorNamespaceSelector:
      any: true
    serviceMonitorSelector:
      any: true
    # Pick up all pod monitors across all namespaces.
    podMonitorNamespaceSelector:
      any: true
    podMonitorSelector:
      any: true
    ruleNamespaceSelector:
      any: true
    externalUrl: "https://${CLOUD_ROBOTICS_DOMAIN}/prometheus/"
    retention: "30d"
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ssd
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
# To compute the disk space required we used the formula in
# https://devops.stackexchange.com/questions/9298/how-to-calculate-disk-space-required-by-prometheus-v2-2
#
# retention_time_seconds = 30 * 24 * 60 * 60
# ingested_samples_per_second = avg(sum(rate(prometheus_tsdb_head_samples_appended_total[1d]))) = ~10500
# bytes_per_sample = avg(sum(rate(prometheus_tsdb_compaction_chunk_size_bytes_sum[1d]) /
#                            rate(prometheus_tsdb_compaction_chunk_samples_sum[1d]))) = 6.4
# needed_disk_space = retention_time_seconds * ingested_samples_per_second * bytes_per_sample = ~174G
              storage: 200Gi
    # Pick up user-created Alertmanager pods with app=alertmanager and a non-empty port.
    additionalAlertManagerConfigs:
    - kubernetes_sd_configs:
        - role: service
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_label_app]
        regex: kube-alertmanager
        action: keep

# etcd, scheduler, and controller-manager are managed by GKE and hidden.
kubeEtcd:
  enabled: false
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false
coreDns:
  enabled: false
# We provide our own ServiceMonitor for kubelets since the standard one doesn't work out
# of the box on GKE.
kubelet:
  enabled: false

# Throws an invalid namespace "kube-system" error during deployment
kubeProxy:
  enabled: false

# Subcharts

grafana:
  env:
    GF_SERVER_DOMAIN: "${CLOUD_ROBOTICS_DOMAIN}"
    GF_SERVER_ROOT_URL: "https://${CLOUD_ROBOTICS_DOMAIN}/grafana"
    GF_AUTH_ANONYMOUS_ENABLED: "true"
  # Load dashboards from configmaps with a given label across all namespaces.
  sidecar:
    dashboards:
      enabled: true
      label: grafana # Label our own legacy grafana-operator uses.
      searchNamespace: ALL
  grafana.ini:
    analytics:
      check_for_updates: false

// Copyright 2019 The Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ${NAMESPACE};

${OPTIONS}

${IMPORTS}
import "third_party/kubernetes_proto/meta/generated.proto";

message ${KIND} {
  // Output only.
  string apiVersion = 1;
  // Output only.
  string kind = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 3;
  ${KIND}Spec spec = 4;
  ${KIND}Status status = 5;
}

message ${KIND}List {
  // Output only.
  string apiVersion = 1;
  // Output only.
  string kind = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 3;
  repeated ${KIND} items = 4;
}

message ${KIND}Event {
  enum Type {
    UNKNOWN = 0;
    ADDED = 1;
    MODIFIED = 2;
    DELETED = 3;
    ERROR = 4;
  }

  Type type = 1;
  ${KIND} object = 2;
}

message Get${KIND}Request {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions options = 2;
}

message List${KIND}Request {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions options = 1;
}

message Watch${KIND}Request {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions options = 1;
}

message Create${KIND}Request {
  ${KIND} object = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions options = 2;
}

message Update${KIND}Request {
  ${KIND} object = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.UpdateOptions options = 2;
}

message Delete${KIND}Request {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions options = 2;
}

message Delete${KIND}Response {
}

service K8s${KIND} {
  rpc Get(Get${KIND}Request) returns (${KIND}) {}
  rpc List(List${KIND}Request) returns (${KIND}List) {}
  rpc Watch(Watch${KIND}Request) returns (stream ${KIND}Event) {}
  rpc Create(Create${KIND}Request) returns (${KIND}) {}
  rpc Update(Update${KIND}Request) returns (${KIND}) {}
  rpc Delete(Delete${KIND}Request) returns (Delete${KIND}Response) {}
}
